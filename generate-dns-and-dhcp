#!/usr/bin/env python

import datetime
import json
import operator
import os
import subprocess

import dns.name
import dns.rdata
import dns.rdataclass
import dns.rdatatype
import dns.zone
import mako.template


def generate_dns_zone(origin, zone_data, fh):

  zone = dns.zone.Zone(dns.name.from_text(origin))

  fh.write('# Automatically generated at: {0}\n\n'.format(datetime.datetime.now()))
  fh.write('local-zone: "{0}" static\n\n'.format(origin))

  for rtype, records in zone_data.iteritems():

    # Turn the record type into an int.
    rdtype = dns.rdatatype.from_text(rtype)

    for record in records:
      rhs = str(record.get('ip', record.get('alias')))

      # Get or create the rdataset for the given name.
      # This will group records with the same name by adding them to the set.
      n = zone.get_rdataset(str(record['name']), rdtype, create=True)
      n.add(dns.rdata.from_text(dns.rdataclass.IN, rdtype, rhs))

  for name, node in sorted(zone.iteritems()):

    for rdataset in node.rdatasets:
      for rd in rdataset:

        fqhn = name.derelativize(zone.origin).to_text()
        ip = rd.to_text()
        rtype = dns.rdatatype.to_text(rdataset.rdtype)

        # Unbound doesn't handle CNAMEs. Turn it into an A record.
        if rdataset.rdtype == dns.rdatatype.CNAME:
          rtype = 'A'
          ip = next(iter(zone.get_rdataset(ip, dns.rdatatype.A)))

          fh.write("# CNAME\n")

        fh.write('local-data: "{host} {rtype} {ip}"\n'.format(host=fqhn, rtype=rtype, ip=ip))

        if rdataset.rdtype != dns.rdatatype.CNAME:
          fh.write('local-data-ptr: "{ip} {host}"\n'.format(ip=ip, host=fqhn))

    fh.write('\n')


def generate_dhcp(domain, dhcp, zone, fh):

  # Inject records for the template.
  dhcp['domain'] = domain
  dhcp['records'] = []

  for rtype, records in zone.iteritems():

    for record in sorted(records, key=operator.itemgetter('name')):
      if 'mac' in record:
        dhcp['records'].append(record)

  fh.write(mako.template.Template(filename='dhcp.mako').render(**dhcp))


def main():
  with open('config.json') as fh:
    config = json.load(fh)

  origin = config['domain']

  dns_file = '/config/unbound/{0}.zone'.format(origin)
  dchp_file = '/config/bin/update-dhcp-mappings.vbash'

  with open(dns_file, 'w') as fh:
    generate_dns_zone(origin, config['dns'], fh)

  with open(dchp_file, 'w') as fh:
    generate_dhcp(origin, config['dhcp'], config['dns'], fh)

  os.chmod(dchp_file, 0o755)

  subprocess.call(['/etc/init.d/unbound', 'reload'])
  subprocess.call([dchp_file])


if __name__ == '__main__':
  main()
