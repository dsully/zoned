#!/usr/bin/env python3

from pathlib import Path

import collections
import json
import sys

import ipaddress
import natsort
import toml


def generate_radius_entries(networks):
    """Generate RADIUS entries for our networks."""

    entries = {}

    for data in [d for d in networks.values() if 'vlan' in d]:

        for client in [c for c in data['clients'].values() if c.get('radius') is True]:

            mac = client['mac']

            entries[mac] = {
                "password": mac,
                "tunnel-param": "13 6",
                "vlan": data['vlan'],
            }

    return entries


def generate_dhcp_server_subnets(networks):
    """Generate the nested mess that is static mappings."""

    entries = {
        "hostfile-update": "disable",
        "shared-network-name": {}
    }

    for name, data in networks.items():

        if name == "Config":
            continue

        network_name = data['shared-network-name']

        subnet = {
            data['subnet']: {
                'static-mapping': dict((client['name'], {'ip-address': ip, 'mac-address': client['mac']}) for ip, client in data['clients'].items())
            }
        }

        entries["shared-network-name"][network_name] = dict(subnet=subnet)

    return entries


def generate_dnsmasq_options(networks):

    options = ['enable-ra']

    domain = networks['Config']['domain']

    for data in networks.values():

        for ip, client in data.get('clients', {}).items():

            ipv6 = client.get('ipv6')

            if ipv6:
                addrs = ','.join([ip, ipv6])
            else:
                addrs = ip

            for name in client.get('aliases', []):
                options.append('host-record={alias}.{domain},{addrs}'.format(domain=domain, alias=name, addrs=addrs))

            if ipv6:
                name = client['name']

                options.append('host-record={host}.{domain},{addrs}'.format(domain=domain, host=name, addrs=addrs))
                options.append('ptr-record={arpa},{host}.{domain}'.format(arpa=ipaddress.ip_address(ipv6).reverse_pointer, domain=domain, host=name))

    return natsort.natsorted(options)


if __name__ == '__main__':

    gateway = json.loads(Path('/srv/unifi/data/sites/default/config.gateway.json').read_text())

    networks = toml.loads(Path('networks.toml').read_text())

    gateway["service"]["dhcp-server"] = generate_dhcp_server_subnets(networks)
    gateway['service']['dns']['forwarding']['options'] = generate_dnsmasq_options(networks)
    gateway['service']['radius-server']['user'] = generate_radius_entries(networks)

    Path('config.gateway.json').write_text(json.dumps(gateway, indent=4, sort_keys=True, separators=(',', ': ')))

    sys.exit(0)
